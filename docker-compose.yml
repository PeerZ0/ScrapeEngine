version: '3.8'

services:
  distributor:
    build: ./Distributor
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=scrapeengine
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    networks:
      - scrapeengine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/public"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  runner:
    build: ./Runner
    environment:
      - DISTRIBUTOR_URL=http://distributor:8080
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=scrapeengine
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    deploy:
      replicas: ${RUNNER_REPLICAS:-3}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - scrapeengine
    restart: unless-stopped

  frontend:
    build: ./Frontend
    ports:
      - 3000
      - 80
    environment:
      - INTERNAL_API_URL=http://distributor:8080
    depends_on:
      distributor:
        condition: service_healthy
    networks:
      - scrapeengine
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    command: postgres -c 'password_encryption=scram-sha-256' -c 'listen_addresses=*'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - scrapeengine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  scrapeengine:
    driver: bridge
